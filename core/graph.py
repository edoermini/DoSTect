from influxdb_client.client.write_api import SYNCHRONOUS
from influxdb_client.client import write_api
from influxdb_client.client.influxdb_client import BucketsApi
from influxdb import SeriesHelper
from threading import Timer
import influxdb_client
from influxdb_client import *
import json
import heapq
import threading
import os
import sys
import signal

class Graph():

    def __init__(self, time_interval=5.0):

        """
        Called by detection and forecasting alghorithms classes.
        Connect to influxdb2 by a given config.ini file.
        Provides two shared priority queue for TCP and UDP volume generated by detection alghorithm
        and retrieve every time_interval sec these volume to create plotting point to write in bucket_name
        
        :param time_interval: time interval provided by input
        """

        # Specific method usage at: https://influxdb-client.readthedocs.io/en/latest/api.html#influxdbclient

        self.interval   = time_interval
        self.bucket_name = "dostect"
        self.org = ""
        self.write_api = None
        self.tcp_queue = []
        self._timer     = None
        self.t = None
        signal.signal(signal.SIGINT,self.signalHandling)

        try:
            # Load influx configuration from .ini file
            conf_file = os.path.join(os.path.dirname(__file__), '../config.ini')
            client = influxdb_client.InfluxDBClient.from_config_file(config_file=conf_file)
            
        except:
            print("Error while connecting to influxdb instance: check your service or .ini file!")
            exit()
            
        self.org = client.org

        # Create buckets API for buckets access
        bucket = client.buckets_api()

        #Check if bucket bucket_name already exists, else create it
        if bucket.find_bucket_by_name(self.bucket_name) is None:
            bucket.create_bucket(bucket_name=self.bucket_name)
            print("[Graph data] - Bucket " + self.bucket_name + " created!")
                    
        #Create write API for points creation
        self.write_api = client.write_api(write_options=SYNCHRONOUS)
  
        # Start writing thread
        self._run()
    

    def write_data(self):

        # Check if there is volume values to write
        if len(self.tcp_queue) != 0:

            # Retrieve volume from <timestamp:volume>
            timestamp, tcp_data = heapq.heappop(self.tcp_queue)
            volume = tcp_data[0]
            threshold = tcp_data[1]
            
            # Create point with value tcp_volume and write it to bucket bucket_name
            p_syn = influxdb_client.Point("data_interval").field("volume", float(volume)).field("threshold", float(threshold))
            self.write_api.write(bucket=self.bucket_name, org=self.org, record=p_syn)
            print("Volume update: " + str(volume) + " threshold: " + str(threshold) + " time: " + str(timestamp))
    

    def update_data(self, data, timestamp, threshold=10):
        # Insert TCP volume into shared priority queue (<timestamp:[volume, threshold]>)
        heapq.heappush(self.tcp_queue, (timestamp, data))
       
    def signalHandling(self, signalNumber, frame):
        t.cancel()

    def _run(self):
        #Run writing point function every self.interval sec
        #ry:
        self.t = threading.Timer(self.interval, self._run).start()
        self.write_data()
    '''
        except (KeyboardInterrupt, SystemExit):
            sys.exit()
     '''
    



        

  
